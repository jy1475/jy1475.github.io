[ { "title": " React 공부", "url": "/posts/%EB%A6%AC%EC%95%A1%ED%8A%B8-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%9D%BC%EA%B8%B0%EC%9E%A5-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8_2/", "categories": "study, React", "tags": "", "date": "2022-12-01 16:00:00 +0900", "snippet": "리액트에서 리스트 사용하기React에서 리스트 렌더링 하기 DiaryList.js 일기 리스트 컴퍼넌트 파일import { useRef, useState } from \"react\";const DiaryEditor = () =&gt; { const authorInput = useRef(); const contentInput = useRef(); const [state, setState] = useState({ author: \"\", content: \"\", emotion: 1, }); const handleChangeState = (e) =&gt; { setState({ ...state, [e.target.name]: e.target.value, }); }; const handleSubmit = () =&gt; { if (state.author.length &lt; 1) { authorInput.current.focus(); return; } if (state.content.length &lt; 5) { contentInput.current.focus(); return; } console.log(state); alert(\"저장 성공!\"); }; return ( &lt;div className=\"DiaryEditor\"&gt; &lt;h2&gt;오늘의 일기&lt;/h2&gt; &lt;div&gt; &lt;input ref={authorInput} value={state.author} onChange={handleChangeState} name=\"author\" placeholder=\"작성자\" type=\"text\" /&gt; &lt;/div&gt; &lt;div&gt; &lt;textarea ref={contentInput} value={state.content} onChange={handleChangeState} name=\"content\" placeholder=\"일기\" type=\"text\" /&gt; &lt;/div&gt; &lt;div&gt; &lt;span&gt;오늘의 감정점수 : &lt;/span&gt; &lt;select name=\"emotion\" value={state.emotion} onChange={handleChangeState} &gt; &lt;option value={1}&gt;1&lt;/option&gt; &lt;option value={2}&gt;2&lt;/option&gt; &lt;option value={3}&gt;3&lt;/option&gt; &lt;option value={4}&gt;4&lt;/option&gt; &lt;option value={5}&gt;5&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div&gt; &lt;button onClick={handleSubmit}&gt;일기 저장하기&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; );};export default DiaryEditor;" }, { "title": " Figma 공부", "url": "/posts/%ED%94%BC%EA%B7%B8%EB%A7%88-%EC%A0%95%EB%A6%AC/", "categories": "study, Figma", "tags": "", "date": "2022-12-01 12:00:00 +0900", "snippet": "피그마 계정 생성피그마 학생 라이센스 인증 피그마 계정을 생성하고 https://www.figma.com/education/ Get verified를 인증받는다. 유용한 정보 Material Design 3 https://m3.material.io/ Material Design 2 https://m2.material.io/ Apple Developer https://developer.apple.com/kr/design/ 피그마 커뮤니티 Material Design https://www.figma.com/@materialdesign단축키 Quck Action shortcut : cterl(cmd)+/ Keyborad shortcut : cterl(cmd)+shift+? 수평 정렬 : Alt+a(좌), Alt+h(중앙), Alt+d(우) 수직 정렬 : Alt=w(상), Alt+v(중앙), Alt+s(하) selection : shift+n(이전) n(다음) child : enter(자식요소 선택) shift+enter(부모요소 선택) 요소 선택 : ctrl + 클릭(단일) ctrl + shift + 클릭(다중) layout grid 선택 : ctrl + shift+ 4, ctrl+g(MacOs) page 이동 : page up, page down panel 이동 : Alt(Opt) + 1 (Layer이동) Alt(Opt) + 2 (Asset이동)Alt(Opt) + 8 (Design이동) Alt(Opt) + 9 (Prototype이동) Alt(Opt) + 0 (Inspect) image 사진 가져오기 : Ctrl(Cmd) + shift + k image 수정 : Alt(Opt) + 더블클릭 오토레이아웃 : shift + A 프레임으로 변경 : Ctrl(Cmd) + Alt(Opt) + G 컴포넌트 생성 : Ctrl(Cmd) + Alt(Opt) + k tool : move(v), rectangle(r), eliipse(o), text(t), fame(f), pen(p) 그룹화 : Ctrl+g(그룹) Ctrl+ shift+g(그룹 해제) 순서 변경 : Ctrl(Cmd) + Alt(Opt) + [(앞) (뒤)]" }, { "title": "React 기초공부", "url": "/posts/%EB%A6%AC%EC%95%A1%ED%8A%B8%EA%B8%B0%EC%B4%881-2/", "categories": "study, React", "tags": "", "date": "2022-11-30 16:00:00 +0900", "snippet": "React 기초공부State State란 계속해서 변화하는 특정 상태 상태에 따라 각각 다른 동작을 한다. 컴포넌트가 갖는 값이 바뀔 동적인 데이터이고 이 상태를 바꾸는 관리를 컴포넌트가 직접 관리하게 된다. ex) 웹페이지에 사용되는 다크테마를 상태라고 생각할 수 있다.어떤 컴포넌트가 상태라는 테마를 가지고 이 상태라는 테마는 다크와 라이트값을 가질 수 있다고 한다. 사용자는 스위치라는 요소를 통해서 이 상태를 변경 시킬 수 있다. return 값이 없거나 return 하지 않으면 JSX문법 에러 npm start 실행하기 전에 현재 위치하고 있는 폴더 확인 PS C:\\Users\\user\\Desktop\\11-30\\react_exam2&gt;Counter 컴포넌트 작성Counter.js 1-1import React, { useState } from \"react\";const Counter = () =&gt; { // 0에서 출발 // 1씩 증가하고 // 1씩 감소하는 // cont상태 console.log(\"counter 호출!\"); const [count, setCount] = useState(0); const onIncrease = () =&gt; { setCount(count + 1); }; const onDecrease = () =&gt; { setCount(count - 1); }; return ( &lt;div&gt; &lt;h2&gt;{count}&lt;/h2&gt; &lt;button onClick={onIncrease}&gt;+&lt;/button&gt; &lt;button onClick={onDecrease}&gt;-&lt;/button&gt; &lt;/div&gt; );};export default Counter; 동적으로 변화해야하는것은 0의 값(+증가, -감소) import React, { useState } from \"react\"; {useState}를 사용하기위해 import 해온다. const [count, setCount] = useState(0);useState 메서드는 배열을 반환하고 배열의 비구조할당을 통해서0번째 인덱스 count, 1번째 인덱스 setCount라는 상수로 받아온다. count는 상태의 값으로 사용되고, setCount는 앞에 count의 상태를 변화시키는 상태변화 함수로 사용된다. useState(0)을 호출하면서 넘겨주는 인자인 0은 count 상태의 초기값이다. useState로 상태를 만들면 count로 그 상태의 값을 불러올 수 있고 setCount로 count의 상태를 업데이트 시킬 수 있다. App.jsimport React from \"react\";import Counter from \"./Counter\";//import './App.css';import MyHeader from \"./MyHeader\";function App() { const number = 5; return ( &lt;div&gt; &lt;MyHeader /&gt; &lt;Counter /&gt; &lt;/div&gt; );}export default App; 화면에 표시되는 숫자가 실시간으로 바뀌는 것은 count 상태가 update 될때마다 Count가 값을 반환하기 때문이다. why? App.js 컴포넌트가 Counter.js 컴포넌트를 호출하고 반환받은 html을 화면에 표시하는 것이기 때문에 Counter 컴포넌트가 값을 리턴을 할 때 화면을 새로그리는 리랜더현상 이 발생한다.결론 컴포넌트는 자신이 가진 상태가 변화하면 리랜더를 한다. (함수가 다시 호출된다.) Counter.js 1-2import React, { useState } from \"react\";const Counter = () =&gt; { // 0에서 출발 // 1씩 증가하고 // 1씩 감소하는 // cont상태 console.log(\"counter 호출!\"); const [count, setCount] = useState(0); const [count2, setCount2] = useState(0); const onIncrease = () =&gt; { setCount(count + 1); }; const onDecrease = () =&gt; { setCount(count - 1); }; const onIncrease2 = () =&gt; { setCount2(count2 + 1); }; const onDecrease2 = () =&gt; { setCount2(count2 - 1); }; return ( &lt;div&gt; &lt;h2&gt;{count}&lt;/h2&gt; &lt;button onClick={onIncrease}&gt;+&lt;/button&gt; &lt;button onClick={onDecrease}&gt;-&lt;/button&gt; &lt;h2&gt;{count2}&lt;/h2&gt; &lt;button onClick={onIncrease2}&gt;+&lt;/button&gt; &lt;button onClick={onDecrease2}&gt;-&lt;/button&gt; &lt;/div&gt; );};export default Counter; 컴포넌트에 State가 여러개 있어도 상관없지만 State의 이름과 State의 상태변화함수는 결국 상수를 선언하는 것이기 때문에 이름이 곁치면 안된다. const [count2, setCount2] = useState(0); PropsProps : 컴포넌트에 데이터를 전달하는 방법function App() { const number = 5; return ( &lt;div&gt; &lt;MyHeader /&gt; &lt;Counter initialValue={5} /&gt; &lt;/div&gt; );}import React, { useState } from \"react\";const Counter = (props) =&gt; { console.log(props); const [count, setCount] = useState(props.initialValue); const onIncrease = () =&gt; { setCount(count + 1); }; const onDecrease = () =&gt; { setCount(count - 1); }; return ( &lt;div&gt; &lt;h2&gt;{count}&lt;/h2&gt; &lt;button onClick={onIncrease}&gt;+&lt;/button&gt; &lt;button onClick={onDecrease}&gt;-&lt;/button&gt; &lt;/div&gt; );};export default Counter; props(properties) : 부모 컴포넌트에서 값에 이름을 붙여 자식컴포넌트에게 값을 전달해 줄 수 있다. 부모 컴포넌트에서 initialValue={5}로 전달만 해서는 적용되지 않는다.const Counter = (props) 처럼 자식 컴포넌트에서 매개변수로 받아 사용한다. 매개변수로 받는 const Counter = (props)는 객체안에 담겨져서 전달 받는다. const [count, setCount] = useState(props.initialValue);props는 점표기법으로 접근해 사용할 수 있다. import React from \"react\";import Counter from \"./Counter\";//import './App.css';import MyHeader from \"./MyHeader\";function App() { const number = 5; const counterProps = { A: 1, B: 2, C: 3, D: 4, initialValue: 5, }; return ( &lt;div&gt; &lt;MyHeader /&gt; &lt;Counter {...counterProps} /&gt; &lt;/div&gt; );}export default App; &lt;Counter initialValue={5} A={1} B={2} C={3} D={4} /&gt; 이렇게 여러개의 prop을 전달할 수 있지만 가독성이 떨어진다. 이럴 경우 자식컴포넌트에 전달해야하는 prop들을 객체로 만들어 스프레드연산자를 사용해 전달한다. import React, { useState } from \"react\";const Counter = ({ initialValue }) =&gt; { const [count, setCount] = useState(initialValue); const onIncrease = () =&gt; { setCount(count + 1); }; const onDecrease = () =&gt; { setCount(count - 1); }; return ( &lt;div&gt; &lt;h2&gt;{count}&lt;/h2&gt; &lt;button onClick={onIncrease}&gt;+&lt;/button&gt; &lt;button onClick={onDecrease}&gt;-&lt;/button&gt; &lt;/div&gt; ); Counter.defaultProps = { initialValue: 0, };};export default Counter; 부모컴포넌트에서 스프레드로 전달했을때const Counter = ({initialValue})자식컴포넌트는 비구조화 할당을 통해 받을 수 있다. 비구조화 할당을 통해서 ({initialValue})매개변수로 전달 받는 props 객체에서 initialValue 값만 전달 받아 사용. App.js에서 const counterProps = {A: 1,B: 2,C: 3,D: 4,}; 처럼 initialValue 값 없음. 어떤 상황에서 의도치 않게 특정 props가 undefind로 전달될것 같을 때 Counter.defaultProps={initialValue:0,} 이런식으로defaultProps를 사용해 기본값을 설정해 에러를 방지 할 수 있다. porps는 정적인 데이터뿐만 아니라 동적인 데이터도 전달 할 수 있다.OddEvenResult.jsconst OddEvenResult = ({ count }) =&gt; { console.log(count); return &lt;&gt;{count % 2 === 0 ? \"짝수\" : \"홀수\"}&lt;/&gt;;};export default OddEvenResult;Counter.jsimport React, { useState } from \"react\";import OddEvenResult from \"./OddEvenResult\";const Counter = ({ initialValue }) =&gt; { const [count, setCount] = useState(initialValue); const onIncrease = () =&gt; { setCount(count + 1); }; const onDecrease = () =&gt; { setCount(count - 1); }; return ( &lt;div&gt; &lt;h2&gt;{count}&lt;/h2&gt; &lt;button onClick={onIncrease}&gt;+&lt;/button&gt; &lt;button onClick={onDecrease}&gt;-&lt;/button&gt; &lt;OddEvenResult count={count} /&gt; &lt;/div&gt; );};Counter.defaultProps = { initialValue: 0,};export default Counter; Counter.js 컴포넌트에서 count를 받을수 있는 방법은 props로 전달 받는 방법 밖에 없다. State와 props을 이용해서 동적인데이터를 전달 받을 수 있다. Counter.js의 자식 OddEvenResult.js 컴포넌트가 count의 state가 바뀔 때 마다 계속 값을 랜더해주는데이렇게 React의 컴포넌트는 부모가 내려주는 props가 변경이 되면 다시 랜더를 하게 된다. 리랜더 부모 컴포넌트에게 props를 받지않는 자식요소여도 부모의 상태가 바뀌면 리랜더가 발생한다. 결국 리액트의 컴포넌트는 본인이 관리하고 본인이 가진 state가 바뀔때 마다 리랜더가 되고, 나에게 전달하는 props가 바뀔때 마다 리랜더가 되고, 자신의 부모가 리랜더가 되면 나도 리랜더가 된다 props는 모든지 전달 가능하기 때문에 컴포넌트 자체도 전달가능하다.컴포넌트를 감싸는 Container컴포넌트const Container = ({ children }) =&gt; { return; &lt;div style=&gt; {children} &lt;/div&gt;;}; children이라는 props를 받고 &lt;div&gt;&lt;/div&gt;안에서 랜더시킨다.import React from \"react\";import Counter from \"./Counter\";//import './App.css';import Container from \"./Container\";import MyHeader from \"./MyHeader\";function App() { const number = 5; const counterProps = { A: 1, B: 2, C: 3, D: 4, initialValue: 5, }; return ( &lt;Container&gt; &lt;div&gt; &lt;MyHeader /&gt; &lt;Counter {...counterProps} /&gt; &lt;/div&gt; &lt;/Container&gt; );}export default App; 컴포넌트의 자식요소로 ``를 배치한다. 이렇게 컴포넌트 사이에 JSX요소들을 배치하게 되면 컴포넌트의 자식으로 배치된 &lt;div&gt;요소들은 Container.js의 컴포넌트에 {children} props으로 전달 된다." }, { "title": "React 간단한 일기장 프로젝트", "url": "/posts/%EB%A6%AC%EC%95%A1%ED%8A%B8-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%9D%BC%EA%B8%B0%EC%9E%A5-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8_1/", "categories": "study, React", "tags": "", "date": "2022-11-30 16:00:00 +0900", "snippet": "간단한 일기장 프로젝트 1-1사용자 입력처리import { useState } from \"react\";const DiaryEditor = () =&gt; { const [state, setState] = useState({ author: \"\", content: \"\", emotion: 1, }); const handleChangeState = (e) =&gt; { setState({ ...state, [e.target.name]: e.target.value, }); //객체초기자구문 }; const handleSubmit = () =&gt; { console.log(state); alert(\"저장 성공!\"); }; return ( &lt;div className=\"DiaryEditor\"&gt; &lt;h2&gt;오늘의 일기&lt;/h2&gt; &lt;div&gt; &lt;input value={state.author} onChange={handleChangeState} name=\"author\" placeholder=\"작성자\" type=\"text\" /&gt; &lt;/div&gt; &lt;div&gt; &lt;textarea value={state.content} onChange={handleChangeState} name=\"content\" placeholder=\"일기\" type=\"text\" /&gt; &lt;/div&gt; &lt;div&gt; &lt;span&gt;오늘의 감정점수 : &lt;/span&gt; &lt;select name=\"emotion\" value={state.emotion} onChange={handleChangeState} &gt; &lt;option value={1}&gt;1&lt;/option&gt; &lt;option value={2}&gt;2&lt;/option&gt; &lt;option value={3}&gt;3&lt;/option&gt; &lt;option value={4}&gt;4&lt;/option&gt; &lt;option value={5}&gt;5&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div&gt; &lt;button onClick={handleSubmit}&gt;일기 저장하기&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; );};export default DiaryEditor;1.DiaryEditor.js 컴포넌트 생성 1-1 &lt;div className=\"DiaryEditor\"&gt; div의 className을 컴포넌트 이름과 맞춰준다.css에 클래스를 가지고 스타일링 할 때 컴포넌트이름과 클래스네임을 일치시켜서 직관적으로 볼 수 있다. 1-2 App.js 에 &lt;DiaryEditor /&gt;를 자식요소로 배치한다. 1-3 DiaryEditor에서 입력받을 태그들을 작성한다.&lt;input&gt;태그에 사용자의 입력을 핸들링 하기 위해 import { useState } from \"react\";해준다. 1-4 &lt;input/&gt; 작성 태그에 setAuthor을 명시해주지 않으면 입력창에 아무리 입력해도 상태가 변하지 않는다. const [author, setAuthor] = useState(\"\");&lt;input value={author} onChange={(e) =&gt; { setContent(e.target.value); }}/&gt;; 1-5 {author}의 값을 변경하기 위해 onChange={(e)=&gt;console.log(e)} 이벤트 사용 input의 값이 바뀌었을 때 onChange이벤트에 전달한 콜백함수 실행 onChange이벤트를 input에 등록하면 input이 변화 할 때 마다 콜백함수를 작동시키고 콘솔에 출력되는 값은 onChange이벤트에 전달한 콜백함수의 넘겨 받은 매개변수 e의 값이다. 이벤트 객체를 콘솔창에서 열어보면 target안에 value값으로 변화한 값을 확인할 수 있다. 이제 target안에 value값을 이용해 콜백함수에 불러다 사용할 수 있다.onChange={(e)=&gt;console.log(e.target.value)} 1-6 value={author} 의 값을 변경하기 위해 setAuthor(e.target.value)로 상태가 변할 때 마다 값을 업데이트 시켜준다. 2.기능이 동일한 두개의 State를 하나로 묶어줄 수 있다.const [state, setState] = useState({ author: \"\", content: \"\",});&lt;input name=\"author\" value={state.author} onChange={(e) =&gt; { setstate({ ...state, //변경사항이 많으면 스프레드연산자를 사용해 다른 값을 일일이 설정해주지 않아도 된다. //스프레드연산자를 아래에 쓰면 author: e.target.value, content: state.content, //state의 객체가 가진 값으로 접근 //state가 객체이기 때문에 변경시킬 때 객체로 만들어서 전달해야한다. ...state, //변경된 사항이 다시 원래상태로 업데이트되어 값이 바뀌지 않는다. //그래서 원래 state를 펼쳐주고 변경할 state들의 프로퍼티를 마지막에 작성한다 }); }}/&gt;; 2-1 onChange 이벤트 핸들러 합치기 변경할 컨텐츠의 이름인 author와 content는 state의 변경할 키의 값과 같다.[e.target.name]: e.target.value, const [state, setState] = useState({ author: \"\", content: \"\",});const handleChangeState = (e) =&gt; { setState({ ...state, [e.target.name]: e.target.value, });};onChange = { handleChangeState };3.감정점수 표기const DiaryEditor = () =&gt; { const [state, setState] = useState({ author: \"\", content: \"\", emotion: 1, }); &lt;div&gt; &lt;span&gt;오늘의 감정점수 : &lt;/span&gt; &lt;select name=\"emotion\" value={state.emotion} onChange={handleChangeState}&gt; &lt;option value={1}&gt;1&lt;/option&gt; &lt;option value={2}&gt;2&lt;/option&gt; &lt;option value={3}&gt;3&lt;/option&gt; &lt;option value={4}&gt;4&lt;/option&gt; &lt;option value={5}&gt;5&lt;/option&gt; &lt;/select&gt; &lt;/div&gt;;}; select에서 선택된 값을 핸들링할 수 있어야 하기 때문에 state에 emotion:1, 작성 input, textarea와 동일하게 name, value, onChange작성 4.저장버튼 저장하기 버튼을 누르면 alert창이 뜨면서 변경사항을 콘솔창에 출력해준다. const handleSubmit = () =&gt; { console.log(state); alert(\"저장 성공!\");};&lt;div&gt; &lt;button onClick={handleSubmit}&gt;일기 저장하기&lt;/button&gt;&lt;/div&gt;;5.App.css 스타일링/* App */.App {}/* editor */.DiaryEditor { border: 1px solid gray; text-align: center; padding: 20px;}.DiaryEditor input,textarea { margin-bottom: 20px; width: 500px;}.DiaryEditor input { padding: 10px;}.DiaryEditor textarea { padding: 10px; height: 150px;}.DiaryEditor select { width: 300px; padding: 10px; margin-bottom: 20px;}.DiaryEditor button { width: 500px; padding: 10px; cursor: pointer;} div의 클래스네임을 컴포넌트의 이름과 똑같이 맞췄기때문에App.css에 적용될 수많은 css중 어떤 컴포넌트에 적용된 css인지 컴포넌트 이름으로 한눈에 알아보기 쉽다." }, { "title": "React 기초공부", "url": "/posts/%EB%A6%AC%EC%95%A1%ED%8A%B8%EA%B8%B0%EC%B4%881-1/", "categories": "study, React", "tags": "", "date": "2022-11-29 16:00:00 +0900", "snippet": "React 기초공부1.React를 사용하는 세가지 이유첫번째 수많은 중복코드를 수정하기 위해 불필요한 유지보수 과정을 겪어야한다. 공통적으로 사용될 요소들을 컴포넌트화 하여 필요부분에 그 컴포넌트를 사용한다. React는 Component기반의 UI라이브러리 이기때문에 모든 html요소들을 컴포넌트화 하여 재사용할수있다. 산탄총수술(Shotgun Surgery) : 중복코드의 변경사항에 의해 파일 하나하나 다 수정 하는 경우 두번째 이유&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;title&gt;Conuter&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Simple Counter&lt;/p&gt; &lt;h2 id=\"result\"&gt;0&lt;/h2&gt; &lt;div&gt; &lt;button onclick=\"minus()\"&gt;Minus&lt;/button&gt; &lt;button onclick=\"plus()\"&gt;Plus&lt;/button&gt; &lt;/div&gt; &lt;script&gt; function plus() { const result = document.getElementById(\"result\"); const current = parseInt(result.innerText, 10); result.innerText = current + 1; console.log(\"plus\"); } function minus() { const result = document.getElementById(\"result\"); const current = parseInt(result.innerText, 10); result.innerText = current - 1; console.log(\"minus\"); } &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 명령형 프로그래밍 : 절차 하나하나 다 나열 해야함 ex) jQuery 결과를 표시할 요소를 가져온다(id=result) 현재 결과값을 10진수 기준, 숫자형으로 변환해서 가져와 current라는 상수에 저장한다. current상수에 저장된 값을 결과를 표시할 요소의 값에 plus라면 +1해서 넣고 miuns라면 -1 해서 넣는다. 선언형 프로그래밍 : 그냥 목적을 바로 말함 ex) React plus를 누르면 result값에 +1 한다. miuns를 눌렀다면 반대로 한다. 명령형 프로그래밍보다 코드의 가독성과 재사용성이 높다. 웹 프론트엔드쪽에서 선언형프로그램인 리액트가 요즘시대에 더 각광받는다. 세번째 이유 Virtual DOM DOM(Document Object Model) : 문서 객체 모델 웹브라우저가 html을 트리형태로 객체화 시켜놓고 그 흐름을 사용자가 볼 수 있다. 브라우저에 잦은 업데이트상황에서 DOM요소에 불필요한 작업연산(랜더링등)을 줄이기위해가상의 돔 Virtual DOM을 사용한다. 실제로 계속 업데이트하는 것이 아니라 가상의 돔에서 업데이트 시켜본다음에 (랜더링과정x)그 항목들을 모아서 한번에 업데이트 시킬 수 있다. 2. React App 사용 React.js : node 기반의 Javascript UI 라이브러리 React와 함께 사용하는 대표적인 두가지 라이브러리 패키지 Webpack : 다수의 js파일을 하나의 파일로 합쳐주는 모듈번들 라이브러리 Babel : JSX 등의 쉽고 직관적인 js문법을 사용할 수 있도록 해주는 라이브러리 React를 처음배우는 입장이면 패키지들의 모든 역할을 이해하고 세팅하는것은 쉽지 않다. 그래서 우린Boiler Plate : 이미 세팅이 완료된 패키지를 사용하여 리액트를 좀 더 쉽게 사용할 수 있다.react 프로젝트 생성 npx : 설치되지 않는 도구를 한번만 사용하고 싶을 때 사용 npx create-react-app react_exam1 : react_exam1 이름의 프로젝트 생성 package 구성 요소가 Node.js 패키지 구성요소와 똑같은 이유?create-react-app 패키지도 결국 Node.js기반의 패키지이기 때문이다. npm start를 실행하면 웹브라우저가 현재 Pc에 요청을 보내고 Pc가 응답한다.Pc가 웹서버가 되고 웹브라우저가 localhost:3000의 주소로 접속할 수 있다.결론적으로 react app은 Node.js기반의 웹서버위에서 동작하고 있다. ctrl + c : 일괄 작업을 끝내는 단축키 React app이 실행되는 순서 react app이 실행되면서 src폴더 안에있는 index.js파일을 실행 index.html파일 &lt;div id=\"root\"&gt;&lt;/div&gt;의 자식으로 App.js에 있는 App( ) 함수가 리턴하는 값들이 들어온다. index.js파일import React from \"react\";import ReactDOM from \"react-dom/client\";import \"./index.css\";import App from \"./App\";import reportWebVitals from \"./reportWebVitals\";const root = ReactDOM.createRoot(document.getElementById(\"root\"));root.render( &lt;React.StrictMode&gt; &lt;App /&gt; &lt;/React.StrictMode&gt;);reportWebVitals(); index.html파일&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt; &lt;meta name=\"theme-color\" content=\"#000000\" /&gt; &lt;meta name=\"description\" content=\"Web site created using create-react-app\" /&gt; &lt;link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" /&gt; &lt;link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" /&gt; &lt;title&gt;React App&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;noscript&gt;You need to enable JavaScript to run this app.&lt;/noscript&gt; &lt;div id=\"root\"&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt;App.js파일import logo from \"./logo.svg\";import \"./App.css\";function App() { return ( &lt;div className=\"App\"&gt; &lt;header className=\"App-header\"&gt; &lt;img src={logo} className=\"App-logo\" alt=\"logo\" /&gt; &lt;p&gt; Edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload. &lt;/p&gt; &lt;a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\" &gt; Learn React &lt;/a&gt; &lt;/header&gt; &lt;/div&gt; );}export default App;폴더 하나씩 살펴보기 node_modules : node.js 패키지의 구성요소중 하나로 외부모듈을 저장하고 있는 폴더 리액트도 외부 모듈이기 때문에 node_modules안에 저장되어 있다. create-react-app로 만든 이 패키지는 수많은 모듈을 가지고 있는데이런 모듈들을 하나하나 다 설치할 수 없기 때문에 자동으로 설치함. (Boiler Plate) node_modules는 모든 모듈의 소스코드를 가지고 있기 때문에 용량이 굉장히 커서 협업을 할 때 같이 보내지 않음package.json과 package-lock.json에 어떤 모듈을 사용했는 지 명시 되어 확인가능 node_modules이 없는 패키지를 받았을 겨우 npm i 해서 다시 설치하면 된다. public favicon.ico 웹브라우저 탭 좌측에 표시될 아이콘 logo192.png, logo512.png, manifest.jons 모바일환경에서 사용 robots.txt 구글이나 네이버가 웹사이트를 수집해 갈때 검색엔진을 띄어줌 수집할 경로를 설정해줄 수 있다. JSX js와 html을 합쳐서 사용할 수 있는 문법을 JSX라고 한다.js에서 변수나 함수같은 값을 html에 쉽게 포함하여 사용할 수 있도록 보완된 문법.function App() { let name = \"홍길동\"; return ( &lt;div className=\"App\"&gt; &lt;header className=\"App-header\"&gt; &lt;p&gt;안녕 리액트 {name}&lt;/p&gt; &lt;/header&gt; &lt;/div&gt; );} App()이라는 함수를 만들고 return으로 JSX문법을 리턴해 주면서 컴포넌트를 만들 수 있다. commonjs 모듈시스템에서는 module.export={}; 같은 형식으로 내보냈는데 리액트는 ES6모듈시스템을 사용한다. commonjs 모듈시스템은 다른패키지를 불러와 사용하거나 react를 직접 구축하고자 할 때 사용 export default App;로 내보낸 모듈을 다른 파일에서 import App from './App';로 import 하여 사용할 수 있다. export 모듈은 한개만 내보낼 수 있다.JSX를 이용해 컴포넌트화 해보기 JSX : html처럼 화면에 나타나는 UI 역할, JS의 확장문법이자 JS와 html을 혼합하여 사용할 수 있는 문법 JSX닫힘규칙 : 태그를 열면 반드시 닫는태그가 있어야함 &lt;/&gt; 최상위태그규칙 : JSX로 컴포넌트를 만들어 return하려면 반드시 하나의 최상위태그로 다른 태그들을 묶어야함. 이런 규칙이 싫다면 import React from ‘react’;로 를 사용해 최상위태그 대신 감싸주면 된다. Fragment사용할 경우 &lt;&gt;&lt;/&gt; 빈 태그로 사용해도 문제없다. index.js에서 부모가 포함하지 않은 자식은 나타날 수 없다.그래서 최상위 부모를 바꿔줄 수 있지만 관례상 App을 최상위 부모(컴포넌트)로 사용한다. JSX에서는 class가 예약어이기 때문에 사용하지 못한다. className으로 사용한다. import 키워드와 경로를 사용하여 css를 사용할 수 있다. import './App.css'; 객체를 만들어서 인라인스타일 사용 const style import React from \"react\";//import './App.css';import MyHeader from \"./MyHeader\";function App() { let name = \"홍길동\"; const style = { App: { backgroundColor: \"black\", }, h2: { color: \"red\", }, bold_text: { color: \"green\", }, }; return ( //&lt;div className=\"App\"&gt; &lt;div style={style.App}&gt; &lt;MyHeader /&gt; &lt;h2 style={style.h2}&gt;안녕 리액트 {name}&lt;/h2&gt; &lt;b style={style.bold_text} id=\"bold_text\"&gt; React.js &lt;/b&gt; &lt;/div&gt; );}export default App; JSX는 js의 변수나 값을 포함하여 화면에 렌더링 해준다. { } 안에 표현식이나 문자열 함수의 호출이 가능하다. 배열이나 true false값은 렌더링 되지 않는다. 조건문을 사용해 각각 다른 요소를 렌더링 할 수도 있다. (조건부 렌더링가능) " }, { "title": "Node.js 기초공부", "url": "/posts/Node.js%EA%B8%B0%EC%B4%88/", "categories": "study, Node.js", "tags": "", "date": "2022-11-28 16:00:00 +0900", "snippet": "Node.js 기초공부1.Node.js란? 리액트가 자바스크립트 라이브러리이기 때문에 자바스크립트는 자바스크립트 엔진 위에서 동작하게 되고 그 엔진은 웹브라우저에 있다. 자바스크립트 코드는 브라우저에 내장된 자바스크립트 엔진을 이용하여 실행한다. 브라우저에 내장된 자바스크립트 엔진을 사용하여야 하기에 자바스크립트는 웹브라우저에만 사용될 수 있었다.브라우저는 HTML문서를 기반으로 동작해 자바스크립트 언어는 HTML문서 안에서 사용했다.그래서 자바스크립트는 웹사이트의 소통말고 할 수 있는 것이 별로 없었다. 브라우저 안에서만 사용하기 아까워 크롬이 JS를 실행할 때 사용하는 v8 엔진을 개발자들이 브라우저와 분리했다.v8엔진은 c++로 개발되어서 브라우저 내부말고 외부에서도 사용가능 브라우저에서 독립가능했던 v8엔진을 사용하여 JS를 브라우저가 아닌다른 곳에서도 사용 가능하게 만는 프로젝트 이름이 node.js이다. node.js는 JS의 실행환경이라고 부를 수 있으며JS의 런타임이다.node를 통하여 브라우저없이 PC에서 실행할 수 있다. JS가 브라우저에서 독립적으로 실행될 수 있다는 것은 JS의 한계가 사라진것 JS로 PC프로그램과 웹서버등을 만들 수 있게 되었다. 2.서버응답 클라이언트가 요청하면 서버가 응답한다. 클라이언트 : 요청하는 주최 서버 : 클라이언트가 요청을 받아서 데이터를 반환 웹서버 :클라이언트인 브라우저로부터 웹을 요청받으면 웹을 반환 (node.js는 모든서버를 만들수 있다.) 웹서버란?url로 요청을 받아서 요청받은 주소에 HTML,CSS,JS로 이루어진 웹파일들을 브라우저에게 전달한다.그래서 url은 웹서버의 주소인걸 알 수 있다. node.js로 자바스크립트 언어를 이용해 웹서버를 만들수 있고웹서버는 도메인 주소를 요청 받아 알맞는 웹파일을 전달 하는 역할이다. 리액트는 브라우저에서 동작하는 복잡하고 여러가지 기능을 가진 js파일들을 쉽게 만들어내는 기술이다. 리액트를 사용하여 만들어낸 JS파일들은 수 많은 기술들을 가지고 있기때문에 웹브라우저가 마치 프로그램처럼 돌아간다. 웹어플리케이션 리액트는 node.js를 기반으로 사용할수있는 기술이기 때문에 노드 없이는 사용하기 어렵다. 브라우저나 코드샌드박스같은 웹아이디가 아니라 PC에서 직접실행한다. 3.node.js node -v, npm -v 노드 npm버전 확인명령어 npm(node package manager) : Node.js의 패키지관리도구 프로젝트를 진행할때 기능별로 파일을 분리해 여러개의 파일들을 프로젝트 폴더나 루트폴더를 만들어서 관리한다. 4. Node.js Hello World &amp; Common JS node.js는 JS를 웹브라우저가 아닌 PC에서도 독립적으로 실행시켜주는 환경이므로자바스크립트 런타임을 그대로 사용하면 된다. 런타임(runtime)이란 프로그래밍 언어가 구동되는 환경이다. index.js파일을 node.js로 실행시키기 위해 필요한것이 터미널 (ctrl+j) 터미널을 열면 자동으로 현재 디렉토리 작업경로를 열어준다. GUI(Graphic User Interface) 마우스클릭으로 실행 CLI(Command Line Interface) 명렁어입력으로 실행(운영체제에 명령을 하달) 터미널에 타이핑(CLI)해서 실행하는 이유? node.js를 이용해 index.js파일을 실행시키려 하는데 파일을 실행하기 위해 운영체제에 명령을 내려야 한다. GUI방식으로 하기위해선 node.js를 바탕화면에 등록해놓거나 실행환경을 등록해 아이콘을 직접 클릭해야한다. 사용자도 node.js창이 떠야 실행가능한데 CLI는 명렁어입력만으로 node.js에서 index.js파일을 실행는 명령을 쉽게 하달할 수 있기 때문에 CLI을 사용한다. 웹브라우저에서 콘솔창을 개발자 도구의 콘솔탭에서 확인할 수 있었는데 node.js는 터미널창에서 확인 가능하다. calc.js파일을 index.js에서 사용하기 위해 모듈을 사용 할 수 있다. 모듈은 어떤기능을 담당하는 각각의 파일들을 말한다. module.exports로 내보내고 require과 경로를 명시해서 불러오는 모듈시스템은 commonjs모듈시스템이라고 한다. 5. node.js패키지 생성 및 외부패키지 사용하기 package : 누군가 만들어놓은 node.js모듈을 의미 npm을 이용해 복잡한 모듈을 사용할 수 있다. package.json 간단한 내부 살펴보기 main : 패키지를 실행할때 어떤 파일을 실행할지 명시한다.scripts : 패키지에서 자주 사용하는 명령어 정의한다.^ : 패키지 범위명시 ^0.6.2이면 0.6.2버전 이상이라는 뜻이다. " }, { "title": "js 정리", "url": "/posts/js_study/", "categories": "study, js", "tags": "", "date": "2022-11-20 10:16:25 +0900", "snippet": "자바스크립트 HTML은 콘텐츠와 골격, CSS는 웹페이지의 레이아웃, JavaScript(Brendan Eich, 브레덴 아이크, Netscape에 있었을 당시 개발)는 웹페이지의 동작 ES1 (초판, 1997) ES2 (1998) ES3 (1999) ES5 (2009, 엄격모드, 배열메서드(map, filter, forEach 등), JSON 등) ES6 (2015, ECMAScript 2015) ES7 (2016, ECMAScript 2016, 이하 생략) ES6 부터 const, let, Promise, Arrow function, class 등의 문법들이 대거 추가 ECMA-인터내셔널 공식 사이트 : https://www.ecma-international.org/ wiki : https://en.wikipedia.org/wiki/ECMAScript 수업 환경 설정 about:blank자바스크립트 삽입위치 head, body의 문서 처음, 중간, 끝 보통 body의 맨 끝&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 id=\"one\"&gt;hello world 1&lt;/h1&gt; &lt;h1 onclick=\"alert('hello')\"&gt;hello world 2&lt;/h1&gt; &lt;script&gt; document.getElementById('two').innerHTML = 'hello' &lt;/script&gt; &lt;h1 id=\"two\"&gt;hello world 2&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;내부 스크립트와 외부 스크립트&lt;script&gt;console.log('hello')&lt;/script&gt;&lt;script src=\"test.js\"&gt;&lt;/script&gt;JavaScript를 출력하는 4가지 방법 문서 내에 요소를 선택하여 출력하는 방법(innerHTML, innerText 등) 문서 내에 직접 출력하는 방법(write 등) 사용자 인터렉션(alert, confirm 등) 콘솔에 찍는 방법(console.log, console.table, console.error 등)코드 구조 문(statement)은 세미콜론으로 구분(세미콜론을 붙이지 않는 곳도 있습니다.) 문은 값, 연산자, 키워드, 명령어, 표현식(값으로 평가, 함수나 key, index를 통한 값의 호출도 표현식) 등으로 구성됩니다. 공백 병합 : 함수나 메서드 내 공백 병합 object 형 자료형 내 공백 병합 선언식에서의 공백 병합 메서드 채이닝의 공백 병합 주의 : ‘‘작은 따옴표, ““큰 따옴표는 개행 공백을 인식하지 못함 -&gt; ``백틱, 템플릿 리터럴은 개행 공백을 인식함 // 1번console.log(1 + 2 + 3)console.log(1, 2, 3)// 2번[10, 20, 30]{ 'one' :1, 'two' :2, 'three':3}// 3번let x = 10, y = 20, z = 30;console.log(x, y, z);// 4번[1, 2, 3] .map(x=&gt;x*2) .map(x=&gt;x*2) .map(x=&gt;x*2) .map(x=&gt;x*2)// 5번// error// console.log('abc// abc// ')console.log(`abc abc `) 주석// 한 줄 주석입니다./*여러줄 주석입니다.*//** * a와 b를 더함 * * @author: jun * @param {number} a 더할 숫자 * @param {number} b 더할 숫자 * @return {number} a + b를 반환함 */function add(a, b) { return a + b;} 엄격모드 ES5에서 최신의 문법들이 많이 추가가 되었는데 기존에 있었던 문법을 변경하는 문법도 나옴 이러한 문법들은 기존 코드의 문제를 불러일으킬 수 있기 때문에 use strict라는 지시자를 통해 엄격모드를 활성화 했을 때에만 반영 class 문법의 경우 엄격 모드가 기본 함수별로 엄격모드를 다르게 적용할 수 있으나 혼란을 야기할 수 있습니다. 변수 선언 키워드를 반드시 사용, delete 키워드 사용 불가\"use strict\";// 코드&lt;script&gt; \"use strict\"; a = 10; // error console.log(age);&lt;/script&gt;&lt;script&gt; a = 10; // error 아님! console.log(age);&lt;/script&gt;변수 변수 이름 규칙 변수는 숫자로 시작할 수 없다. 띄어쓰기가 안된다. 예약어를 사용할 수 없다.(예약어가 사용 불가능한 것은 아닙니다.) $, _를 제외한 특수문자를 사용하지 않는다. 대소문자를 구분한다. class는 첫 문자를 대문자로, 나머지는 보통 소문자로 시작한다. var, let, const if (true) { const testName = \"hojun\"; let testAge = 10;}if (true) { var testName2 = \"hojun\"; var testAge2 = 10;} var(ES5 이전, 지금 사용 권장 X) : 함수 레벨 스코프, 재선언시 애러 X let(ES5) : 블록 레벨 스코프, 재선언시 애러 O, 콘솔에서는 애러 X, 변경가능한 자료형 const(ES5) : 블록 레벨 스코프, 재선언시 애러 O, 콘솔에서는 애러 X, 변경이 불가능한 자료형(상수) 모든 변수는 const를 사용하고, let을 꼭 사용해야 하는 변수에서만 let을 사용하길 권고합니다. function hello() {const x = 10;// 1000줄의 코드return x * 1000;} DOM을 탐색해야 하는 경우 const를 사용하고, (간혹) $를 하는 경우도 있습니다. 반복문이나 함수 밖에서 주로 사용합니다. const $helloElement = document.getElementById(\"hello\"); 연산 산술 연산자(+, -, /, *, **, %) (복합) 할당 연산자(=, +=, -=, /=, *=, **=, %=) 논리 연산자(&amp;&amp;,   , !, !!, &amp;, , ~) 참 -&gt; true -&gt; 1 거짓 -&gt; false -&gt; 0 &amp;&amp;는 곱   는 합 !는 부정 !!는 true와 false를 반환하게 해주는 코드 암기코드 // 할당연산자 체이닝(권하지 않습니다.)a = b = c = 2 + 2; for (let x = 0; x &lt; 100; x++) { if (x % 3 == 0 &amp;&amp; x % 5 == 0) { console.log(x); }} // 앞에 값이 널이냐를 확인하고 싶은 경우, 단락 회로 평가라고 부릅니다.result1 = 10 || 100;result2 = 0 &amp;&amp; 100;result3 = null || 100;result4 = null &amp;&amp; 100;username = \"hojun\";result5 = username || \"유저 이름이 없습니다\";username = undefined;result5 = username || \"유저 이름이 없습니다\"; 비교 연산자(&gt;, &gt;=, &lt;, &lt;=, ==, !=, ===, !==) 문자열 비교 : 유니코드 순 문자열 순서대로 하나씩 비교하고, 문자가 모두 같은데 길이가 다른 경우 길이가 더 긴 것이 크다 leehojun &gt; leehojung; // false 다른 형을 가진 값 간의 비교 : 비교하려는 값의 자료형이 다르면 값들을 모두 숫자형으로 변환 console.log(\"2\" &gt; 1); // trueconsole.log(\"01\" == 1); // true null과 undefined 비교하기 산술 연산자나 기타 비교 연산자를 사용하면(==, === 제외) null과 undefined는 숫자형으로 변환 null은 0 undefined는 NaN console.log(null == undefined); // trueconsole.log(null === undefined); // false 에지 케이스(edge case) console.log(null &gt; 0); // f(null이 0으로 변환)console.log(null == 0); // f(null이 0으로 변환되지 않음)console.log(null &gt;= 0); // t(null이 0으로 변환)// &gt;= 연산을 할 때에 null이 0으로 변환이 되어 위와 같은 일을 만듬console.log(undefined &gt; 0); // f (undefined가 NaN으로 변환, NaN은 뒤도 돌아보지 않고 비교를 하면 false)console.log(undefined &lt; 0); // f (undefined가 NaN으로 변환, NaN은 뒤도 돌아보지 않고 비교를 하면 false)console.log(undefined == 0); // f(undefined와 null이 같고, 그 외에 값은 false) 단항 산술 연산자(++x, x++, –x, x–) nullish 병합 연산자(??) 비트 연산자(AND - &amp;, OR - , XOR - ^, NOT - ~, 왼쪽 시프트 - «, 오른쪽 시프트 - », 부호 없는 오른쪽 시프트 - »&gt; ) let result1;let result2 = result1 ?? 100;let result3 = 10;let result4 = result3 ?? 100;let result5 = null;let result6 = result5 ?? 100;username = \"hojun\";result5 = username ?? \"유저 이름이 없습니다\";username = undefined;result5 = username ?? \"유저 이름이 없습니다\";let x = 0;console.log(x || 10); // 10 (x가 0이니 false로 판단)console.log(x ?? 10); // 0 (x라는 값이 있다고 판단) typeof 연산자 프로퍼티 접근 연산자 마침표 프로퍼티 접근 연산자 대괄호 프로퍼티 접근 연산자 관계 연산자 키만 가지고 판단 10 in [10, 20, 30]; // false1 in [10, 20, 30]; // true1 in \"hello\"; // error\"name\" in { name: \"hojun\", age: 10 }; //true\"length\" in [10, 20, 30]; // true 변수의 형변수(타입, typeof로 확인 가능) 원시타입(primitive types) : number, string, boolean, null, undefined, symbol(ES6 추가, 변경 불가능한 유일한 값) 참조타입(reference types) : object(object, array, map, set), function Number(숫자) 형태 : 10, 10.123, -10, Infinity(1/0), -Infinity, NaN(“hello”/2) 호출 : 변수명 메서드 : 10.toString()는 안됩니다. 이유는 무엇일까요? 소수점 때문에 그렇습니다.(JavaScript의 parsing때문이고, 아는 분이 많지는 않습니다.) (10).toString()와 변수명.toString()은 가능합니다. num.toFixed() num = 10.12345;num.toFixed(3);(\"10.123\"); Number.MAX_SAFE_INTEGER : JavaScript에서 안전한 최대 정수값 Number.MIN_SAFE_INTEGER : JavaScript에서 안전한 최소 정수값 Number.MAX_VALUE : JavaScript가 표현할 수 있는 제일 큰 양의 숫자 Number() parseInt() - 권고, parseFloat() parseInt(\"1hello world\"); // 1Number(\"1hello world\"); // NaN Math Math.PI Math.max() Math.min() Math.floor() Math.round() Math.random() Math.abs() Math.sqrt() Math.pow() NaN Infinity, -Infinity BigInt (2**53-1)(9007199254740991) 보다 큰 값을 Number로 나타낼 수 없으며, 나타내도 안전한 연산을 할 수 없습니다. const big = 123123123123123123123123123123123123123123123123123123123123123123n; String(문자열) 형태 : ‘abcde’, “abcde”, abcde ${변수명} 호출 : 변수명, 변수명[0] (변수명[index], 호출은 할 수 있지만 개별 값 변경 불가) 메서드 : str.length str.indexOf() str.lastIndexOf() str.includes() str.slice() str.split() str.substring() str.substr() // 비권고 사항, MDN 문서 참고 str.toLowerCase() str.toUpperCase() str.trim() str.replace() str.concat() str.repeat() str.splice() -&gt; 업데이트 사항 : 배열에 있는 메서드입니다. str에는 없습니다. 'hello'.repeat(100)'0'.repeat(100)'5'.repeat(100).split('').map(Number)'5'.repeat(100).split('').map(parseInt) -&gt; 중간에 NaN이 됩니다. 2번째 인자가 진수여서 그렇습니다.'5'.repeat(100).split('').map(e =&gt; parseInt(e)) Boolean(논리값, 논리형, 분린형) 형태 : true, false 호출 : 변수명 어떤 것이 true이고 어떤 것이 false인지 판단할 수 있어야 합니다.(truthy, falsy -&gt; 우리가 매우 깊이 다뤘던 내용입니다.) undefine : undefind 형태 : let a, console.log(a) null : object 형태 : let a = null Array(배열) : object 형태 : [‘하나’, ‘둘’, ‘셋’], [100, 200, 300], 호출 : 변수명, 변수명[0], 변수명[0][0] (변수명[index], 개별값 변경 가능) Array 메서드 : length forEach map filter push / pop - mutable(수정 가능한) slice - immutable(수정이 불가한) splice - mutable reduce - immutable join indexOf includes find concat every some fill — mutable shift — mutable unshift — mutable reverse — mutable sort — mutable Array(100).fill(0)Array(100).fill('hello')Array(100).fill('hello'.repeat(2))Array(100).fill(0).map((value, index)=&gt; value + index)Object.keys(Array(100).fill(0)).map(Number)[...Array(100).keys()]Array.from({length: 100}, (v, i) =&gt; i + 1) Object(객체) 생성하는 방법 let data = new Object(); // '객체 생성자'let data = {}; // '객체 리터럴'let human = { name: \"hojun\", age: 10,};human.name;human[\"name\"];// delete human.age; // 권하지 않습니다.// human.age = null // 권합니다. 형태 : { \"지역이름\": \"전국\", // key : value(2개의 집합을 가리켜 객체 프로퍼티) \"확진자수\": 24889, \"격리해제수\": 23030, \"사망자수\": 438, \"십만명당발생율\": 48.0}{ 'one' : 1, 'o n e' : 1, '1 one' : 1}{ one : 1, o n e : 1, // error 1 one : 1 // error}let x=1, y=2, z=3let object = {x, y, z} // {x: 1, y: 2, z: 3} 호출 : 변수명, 변수명.지역이름, 변수명[‘지역이름’] (변수명.key, 변수명[key]) 수정, 삭제 : 수정 : value[‘hello’] = ‘world’, value[‘hello’] = null 삭제 : delete value[‘hello’]는 추천하지 않음(메모리 상에 ‘world’가 남아있음, value[‘hello’] = null을 권장) 속성 : console.log(Object.getOwnPropertyDescriptor(person, \"name\"));Object.getOwnPropertyDescriptors(person);// {10: {…}, name: {…}, age: {…}, height: {…}, weight: {…}, 이력: {…}}// value: '이호준',// writable: true, // 변경 가능 여부, 기본값 false// enumerable: true, // 열거(for) 가능 여부, 기본값 false// configurable: true // 재정의 가능 여부, 기본값 false 메서드 : Object.keys, Object.values, Object..entries //변수명.keys()와 같은 형식은 안됩니다.x.keys(); Map : object 메서드 : set, get, has, delete, size, clear, keys, values, entries let map = new Map();map.set(\"one\", 100);map.set(\"two\", 200);map.set(\"three\", 300);map;// Map(3) {'one' =&gt; 100, 'two' =&gt; 200, 'three' =&gt; 300}// map = {\"one\":100, \"two\":200, \"three\":300}// map[\"one\"] // object에서만 됩니다.map.set(\"four\", [10, 20]);map.set(5, [100, 200]);map.set([1, 2], [100, 200]);map.get(5);// let test = {// 1:10,// 2:20,// 3:30// }// test.1 // error// test[1] // 됩니다.let human = { name: \"hojun3\", age: 30, local: \"jeju\",};let hojun = new Map(Object.entries(human)); Set : object 메서드 : add, delete, has, size 중복을 허락하지 않는다 합집합, 교집합, 차집합 등에 메서드가 있진 않지만, 이러한 합집합, 교집합, 차집합을 구현하기 위해 Set을 사용하는 경우가 많습니다. let set = new Set();set.add(1);set.add(1);set.add(2);set.add(2);set.add(3);set.add(3);set.add(3);set.add(3);set.size;// let set = new Set([1, 2, 3, 3, 3, 3])// let set = new Set('helllllllllo') let a = new Set([1, 2, 3]);let b = new Set([3, 4, 5]);const 합집합 = new Set([...a, ...b]);const 교집합 = [...a].filter((x) =&gt; b.has(x));const 차집합1 = [...a].filter((x) =&gt; !b.has(x));const 차집합2 = [...b].filter((x) =&gt; !a.has(x)); 형변환 String 보다는 toString(명시적) Number 보다는 parseInt(명시적) 명시적 형변환이 아니라 암시적(묵시적) 형변환 console.log(\"6\" / \"2\");console.log(\"6\" * \"2\");console.log(+\"6\");console.log(-\"6\");console.log(Number(undefined));console.log(Number(null));console.log(Number(true));console.log(Number(false)); 0, null, undefined, NaN, ““은 false이며 그 외의 값은 true입니다. +를 사용해서 2개 이상을 연산할 때에 하나가 문자열이면 나머지 하나도 문자열로 연산합니다.(뺄셈과 나눗셈, 곱셈의 방식은 다릅니다.) \"2\" + 2;// '22'2 + \"2\";// '22'1 + 1 + 3 + \"2\" + \"2\";// 522// 덧셈이 아닌 경우에는 다른 결과가 나옵니다2 * \"2\";// 4\"2\" * \"2\";// 4\"2\" * 2;// 4 조건문과 반복문조건문 if else if else switch // 한 줄로 사용하는 경우도 종종 있습니다.if (true) console.log(\"hello world\"); // if문 안에서 선언된 변수(let, const)는 밖에서 읽을 수 없습니다.if (true) { let x = 10; console.log(x);}console.log(x); if (1) console.log(\"1\");if (\"\") console.log(\"공백없음\");if (\" \") console.log(\"공백\");if (\"hello\") console.log(\"hello\");if (NaN) console.log(\"NaN\");if (null) console.log(\"null\");if ([]) console.log(\"[]\"); // 주의if ({}) console.log(\"{}\"); // 주의 if (false) { console.log(\"hello 1\");}if (false) { console.log(\"hello 2\");}if (true) { console.log(\"hello 3\");}if (true) { console.log(\"hello 4\");} if (false) { console.log(\"hello 1\");} else if (false) { console.log(\"hello 2\");} else if (true) { console.log(\"hello 3\");} else if (true) { console.log(\"hello 4\");} else { console.log(\"!!\");} // condition ? value1 : value2;let result = true ? 1 : 100; 문제 : 다음 if문을 3항 연산자로 만들어보세요. // 문제1let money = 500;if (money &lt; 1300) { console.log(\"버스를 탈 수 없습니다.\");} else { console.log(\"버스를 탔습니다.\");}// let money = 500// money &lt; 1300 ? console.log('버스를 탈 수 없습니다.') : console.log('버스를 탔습니다.')// 문제2let money = 500;if (money &lt; 1300) { money += 1000;} else if (money &lt; 2000) { money += 500;} else { money += 100;}//let money = 500//money &lt; 1300 ? money += 1000 : (money &lt; 2000 ? money += 500 : money += 100)//let money = 500//money &lt; 1300 ? money += 1000 : money &lt; 2000 ? money += 500 : money += 100 // switch 문을 사용하실 때에는 type확인을 하세요!switch (2) { case 1: console.log(100); break; case 2: console.log(200); break; case 3: console.log(300); break; default: console.log(\"값이 없음\"); break;} 반복문 for for in for of while do while forEach break continue//예제for (let i = 0; i &lt; 10; i++) { console.log(i);}//예제let a = [10, 20, 30, 40];for (let i of a) { console.log(i);}//예제let a = [10, 20, 30, 40];for (let i in a) { console.log(i);}let a = { one: 1, two: 2 };for (let i in a) { console.log(i);}//예제let x = 0;while (x &lt; 10) { console.log(x); x++;}let x = 0;while (x &lt; 10) { console.log(x); x += 2;}let x = 0;while (true) { console.log(x); x += 2; if (x &gt;= 10) { break; }}while (true) { value = prompt(\"명령을 입력하세요.\"); console.log(value); if (value === \"break\") { break; }}let value = ~~(Math.random() * 100);console.log(value);while (true) { input = prompt(\"명령을 입력하세요.\"); console.log(input); if (value === parseInt(input)) { break; } else if (value &gt; parseInt(input)) { console.log(\"UP!!\"); } else if (value &lt; parseInt(input)) { console.log(\"DOWN!!\"); }}let i = 10;while (i) console.log(i--);//예제let x = 0;do { console.log(x); x++;} while (x &lt; 10);//예제let a = [10, 20, 30, 40];a.forEach((e) =&gt; console.log(e ** 2));// 문법// for (초깃값; 조건; 증감식) {// // 구문// }//예제for (let i = 0; i &lt; 10; i++) { if (i == 5) { break; } console.log(i);}for (let i = 0; i &lt; 10; i++) { if (i == 5) break; console.log(i);}for (let i = 0; i &lt; 10; i++) { if (i == 5) continue; console.log(i);}// 여러가지 테스트 문법for (let i = 10; i &gt; 0; i--) { console.log(i);}let k = 1;for (; k &lt; 10; k++) { console.log(k);}let k = 1;for (; k &lt; 10; ) { console.log(k); k += 2;}for (;;) { value = prompt(\"명령을 입력하세요.\"); console.log(value); if (value === \"break\") { break; }}for (let test = [\"a\", \"b\", \"c\", \"d\"]; test.length &gt;= 1; test.pop()) { console.log(test);}for (let test = [\"a\", \"b\", \"c\", \"d\"]; test.length &gt;= 0; test.pop()) { console.log(test);}for (let i = 2; i &lt; 10; i++) { for (let j = 1; j &lt; 10; j++) { console.log(`${i} X ${j} = ${i * j}`); }}console.log(\"end\");for (let i = 2; i &lt; 10; i++) { for (let j = 1; j &lt; 10; j++) { if (i == 5) break; console.log(`${i} X ${j} = ${i * j}`); }}console.log(\"end\");outer: for (let i = 2; i &lt; 10; i++) { for (let j = 1; j &lt; 10; j++) { console.log(`${i} X ${j} = ${i * j}`); if (i == 5) break outer; }}console.log(\"end\");for (let i = 2; i &lt; 10; i++) { for (let j = 1; j &lt; 10; j++) { if (i == 5) break; console.log(`${i} X ${j} = ${i * j}`); } if (i == 5) break;}console.log(\"end\");함수와 클래스함수 함수 표현식과 함수 선언식 let 함수표현식 = function () {}; // 호이스팅 Xfunction 함수선언식() {} // 호이스팅 Osum(10, 20);function sum(x, y) { return x + y;}sum(10, 20);let sum = function (x, y) { return x + y;};sum(10, 20);let sum = (x, y) =&gt; { return x + y;}; 함수(파선아실) 여기서 x, y를 보통 한국에서는 인자 매개변수(파라미터, parameter) : x, y 전달인자(아규먼트, argument) : 3, 5 사용이유 재사용성 아키텍처 파악 유지보수 function 땅다지기() {}function 시멘트작업() {}function 철근() {}function 벽돌() {}function 지붕() {}땅다지기();시멘트작업();철근();벽돌();지붕(); 예제 function add(x, y) { return x + y;}add(3, 5);function add(a = 100, b = 200) { console.log(a, b); return a + b;}add(10, 20);// 30add(10);// 210add();// 300add((b = 300)); // a에 입력// 500add(undefined, 300);// 400function add({ a = 100, b = 200 }) { console.log(a + b);}add({ b: 300 }); // 400 콜백함수 function add(x, y) { return x + y;}function mul(x, y) { return x * y;}function cal(a, b) { return a(10, 10) + b(10, 10);}cal(add, mul); 화살표 함수를 콜백함수로 사용했을 경우의 장단점 장점 : 네이밍을 안해도 됩니다. 단점 : 다른 곳에서 사용할 수가 없다. 단점 : 콜백지옥에 빠질 수가 있습니다. function cal(a, b) { return a(10, 10) + b(10, 10);}cal( (a, b) =&gt; a + b, (a, b) =&gt; a * b); 화살표함수 function 제곱(x) { return x ** 2;}// 함수표현식, 호이스팅 Xlet 제곱 = (x) =&gt; x ** 2;// 인자가 1개일 때에는 괄호 Xlet 제곱 = (x) =&gt; x ** 2;// 본문이 있는 경우 중괄호let 제곱 = (x) =&gt; { console.log(x); return x ** 2;};function f(a, b) { let z = 10; let result = z + a + b; return result;}// 함수표현식, 호이스팅 Xlet f = (a, b) =&gt; { let z = 10; let result = z + a + b; return result;}; 기명 함수 // 기명 함수let aa = function sum(x, y) { return x + y;};// 익명 함수인것 같지만 바뀜let bb = function (x, y) { return x + y;};// ES5에서는 빈 문자열이었는데 ES6에서 name 값을 가지는 것으로 바뀌었습니다.let cc = (x, y) =&gt; x + y; 익명 함수 console.dir(function (x, y) { return x + y;}); return function hello() { console.log(\"hello\"); console.log(\"hello\"); console.log(\"hello\"); return; console.log(\"hello\"); console.log(\"hello\"); console.log(\"hello\");}hello(); 클래스 클래스 - 붕어빵 찍는 틀, 공장 인스턴스 - 붕어빵, 제품class Human { constructor() {} // 인스턴스 메서드, 인스턴스 프로퍼티 메서드, 프로토타입 메서드 a() {} // 클래스 메서드, 클래스 프로퍼티 메서드, 정적 메서드 static b() {}}hojun = new Human(\"호준\");typeof hojun; // objecttypeof Human; // function// getter - 획득// setter - 설정// # = private 필드class Student { subject = \"javascript study\"; #level; constructor(level, name, skill) { this.#level = level; this.name = name; this.skill = skill; } get level() { // hojun.level로 출력 return this.#level; } set level(level) { // hojun.level = 10 this.#level = level; } attack() { console.log(\"파이어볼!\"); }}class Mento extends Student { codeReview() { console.log(\"코드리뷰를 진행합니다.\"); }}let hojun = new Student(999, \"호준\", [\"python\", \"js\", \"...생략...\"]);let hojun2 = new Mento(999, \"호준\", [\"python\", \"js\", \"...생략...\"]);예외처리, 전개표현식, 정규표현식, 리터럴 등예외처리try { // 코드} catch (e) { // 코드} finally { // 코드}//throw new Error(message);//throw new SyntaxError(message);//throw new ReferenceError(message);전개구문 사용 전개구문 사용 예제 function f(...x) { return x;}f(1, 2, 3, 4, 5); let arr1 = [1, 2, 3, 4];let arr2 = [10, 20, 30, 40];let arr3 = [100, ...arr1, 200, ...arr2, 300];let arr4 = [100, arr1, 200, arr2, 300];console.log(arr3);Math.max(...arr3);let [a, b, c, ...d] = [10, 20, 30, 40, 50, 60, 70]; 정규표현식 특정 패턴을 찾아낼 때 사용 연습사이트 : https://regexr.com/5nvc2// 0 문자 제거let s = \"010100020201020304812123\";s.replace(/[^1-9]/g, \"\");(\"11221234812123\");// 앞 뒤 공백 제거(캐릭터 클래스 `\\s`사용)s = \" 010100020201020304812123 \";s.replace(/^\\s+|\\s+$/g, \"\");(\"010100020201020304812123\");// 문자열 내 공백 제거s = \" 01010002020 102030 4812123 \";s.replace(/\\s/g, \"\");(\"010100020201020304812123\");// 개행 제거s = `abcd`;(\"\\na\\nb\\nc\\nd\\n\");s.replace(/\\n/g, \"\");(\"abcd\");s = \"hello world HELLO WORLD\";s.match(/hello/gi);s1 = \"010-5000-2000\";s2 = \"010 5000 2000\";s3 = \"010~5000!2000\";s4 = \"010!!5000!!2000\";s5 = \"01050002000\";s1.split(/-/g);// hint// s.split(/([a-z])([0-9])/g)// s.split(/([a-z]{3})/g)s1.split(/([0-9]{3})[- ~!]*([0-9]{4})[- ~!]*([0-9]{4})/);/*- `^` : 문자열의 시작- `$` : 문자열의 종료. 옵션에 따라 문장의 끝 또는 문서의 끝에 매치된다.- `.` : 임의의 한 문자- `[]`: 문자 클래스. 문자 클래스 안에 들어가 있는 문자는 그 바깥에서 하나의 문자로 취급된다.- `^` : 문자 클래스 내에서 ^는 not- `-` : ex) a-z는 a에서 z까지의 문자- `|` : or를 나타냄- `?` : 앞 문자가 없거나 하나 있음- `+` : 앞 문자가 하나 이상임- `*` : 앞 문자가 0개 이상임- `{n,m}` : 앞 문자가 `n`개 이상 `m`개 이하. `{0,1}` 은 `?`와 같은 의미다.- `{n,}` : 앞 문자가 `n`개 이상. 위의 형태에서 `m`이 생략된 형태이다. `{0,}` 이면 `*`와 같고 `{1,}` 이면 `+`와 같은 의미이다.- `{n}` : 앞 문자가 정확히 `n`개. `{n,n}` 과 같은 의미이다.- `()` : 하나의 패턴구분자 안에 서브 패턴을 지정해서 사용할 경우 괄호로 묶어주는 방식을 사용한다.- `\\s` : 공백문자- `\\b` : 문자와 공백 사이를 의미한다.- `\\d` : 숫자 [0-9]와 같다.- `\\t` : 탭문자- `\\w` : 단어 영문자+숫자+_(밑줄) [0-9a-zA-Z_]문자 이스케이프는 대문자로 적으면 반대를 의미한다.[a-z] : a ~ z 사이의 문자를 찾음[1-9] : 1 ~ 9 사이의 문자를 찾음[abc] : a, b, c중 하나를 찾음[^abc] : a, b, c를 제외한 문자를 찾음.z : 아무 문자 하나를 . 기호로 찾으며 z로 끝남을 의미a+ : a가 1개 이상을 의미함a* : a가 0개 또는 그 이상을 의미함s : 공백 문자를 찾음(스페이스, 탭 등), 대문자의 경우 아닌 문자를 찾음d : 숫자를 찾음, 대문자의 경우 아닌 문자를 찾음w : 알파벳 영문과 숫자와 언더바 _ 기호를 찾음, 대문자의 경우 아닌 문자를 찾음t : 탭 공간을 찾음g : 검색범위를 전역으로 확장i : 대소문자를 구분하지 않음gi : 검색 범위를 전역으로 확대하면서 대소문자를 구분하지 않음m : 여러줄을 동시에 매칭함*/리터럴 리터럴은 약속된 기호를 사용해 값을 생성하는 것입니다. 예를 들어 문자를 생성하기 위해서는 작은 따옴표, 큰 따옴표, 템플릿 리터럴 중 하나를 사용하죠. 배열을 생성하려면 대괄호를, 오브젝트를 생성하려면 중괄호를 사용해야 합니다. new String(), new Array(), new Object()의 형식으로 만들어야 하는 것을 약속된 기호로 만들 수 있게 해준 것입니다. new Object() 의 리터럴 표현이 {}, new Number(1) 의 리터럴 표현이 1, new String(“hello”) 의 리터럴 표현이 “hello” 입니다. new Object()는 생성자 함수를 이용한 것이죠. 정규표현식 리터럴let x = /[a-zA-Z0-9]/g; 2진수, 8진수, 16진수 리터럴let a = 0b1001; // a == 9let b = 0o1001; // b == 513let c = 0x1001; // c == 4097사용자와 상호작용 prompt(‘hello’) comfirm(‘hello’) alert(‘hello’)구조분해할당 예제 for (let [[i, j], k] of [ [[1, 2], 2], [[1, 2], 4],]) { console.log(i, j);} let x = 10, y = ((20)[(x, y)] = [y, x]);let { a, b } = { b: \"hello\", a: \"world\" }; 다른 언어에서는 언패킹이라고 부르기도 합니다. 동기와 비동기 js는 일을 처리할 수 있는 thread가 1개, 싱글쓰레드라고 함. 하지만 모든 일을 여러명이 처리할 수 없다면 항상 기다려야 하는 문제가 생길 수도 있고, 무한대기에 빠질 수도 있음.// 순서대로 한다면 덧셈, 곱셈, hello world 순이지만// 비동기이기 때문에 hello world, 곱셈, 덧셈 순이 됨function 덧셈(a, b, 콜백함수) { setTimeout(() =&gt; { let result = a + b; console.log(result); }, 2000);}function 곱셈(a, b, 콜백함수) { setTimeout(() =&gt; { let result = a * b; console.log(result); }, 1000);}덧셈(20, 30);곱셈(2, 6);console.log(\"hello world\"); Promise pending(대기상태) - resolve(해결) - fulfilled(성공) pending(대기상태) - reject(거부) - rejected(실패) new Promise((resolve, reject) =&gt; { //code}) .then((result) =&gt; result) .then((result) =&gt; result) .catch((err) =&gt; err) .finally((result) =&gt; result);let p = new Promise(function (resolve, reject) { resolve(\"hello world\");}) .then((메시지) =&gt; { alert(메시지); return 메시지.split(\" \")[0]; }) .then((메시지) =&gt; { alert(메시지); return 메시지[0]; }) .then((메시지) =&gt; { alert(메시지); });p;//Promise {&lt;fulfilled&gt;: undefined}let p = new Promise(function (resolve, reject) { // resolve('hello world'); reject(\"hello world\");}) .then((메시지) =&gt; { alert(메시지); return 메시지.split(\" \")[0]; }) .then((메시지) =&gt; { alert(메시지); return 메시지[0]; }) .then((메시지) =&gt; { alert(메시지); }) .catch((메시지) =&gt; { alert(\"catch 실행!! :\" + 메시지); });let p = new Promise(function (resolve, reject) { // resolve('hello world'); reject(\"hello world\");}) .then((메시지) =&gt; { alert(메시지); throw Error(\"에러 발생!\"); return 메시지.split(\" \")[0]; }) .then((메시지) =&gt; { alert(메시지); return 메시지[0]; }) .then((메시지) =&gt; { alert(메시지); }) .catch((메시지) =&gt; { alert(\"catch 실행!! :\" + 메시지); });let p = new Promise(function (resolve, reject) { resolve(\"hello world\"); //reject('hello world');}) .then((메시지) =&gt; { alert(메시지); throw Error(\"에러 발생!\"); return 메시지.split(\" \")[0]; }) .then((메시지) =&gt; { alert(메시지); return 메시지[0]; }) .then((메시지) =&gt; { alert(메시지); }) .catch((메시지) =&gt; { alert(\"catch 실행!! :\" + 메시지); });let p = new Promise(function (resolve, reject) { setTimeout(() =&gt; resolve(\"끝남!\"), 3000);});console.log(\"hello world\");console.log(p);//VM92:4 hello world//VM92:5 Promise {&lt;pending&gt;}// 3초 후console.log(p);//&lt;/pending&gt;/VM139:1 Promise {&lt;fulfilled&gt;: '끝남!'}let p = new Promise(function (resolve, reject) { setTimeout(() =&gt; resolve(\"끝남!\"), 10000);});console.log(\"hello world\");console.log(p);//VM180:1 Promise {&lt;pending&gt;}console.log(p);// VM184:1 Promise {&lt;pending&gt;}console.log(p);// VM184:1 Promise {&lt;pending&gt;}console.log(p);// VM184:1 Promise {&lt;pending&gt;}console.log(p);//VM204:1 Promise {&lt;fulfilled&gt;: '끝남!'}// 실행하지 마세요. pending에 빠집니다.//let p = new Promise(function(resolve, reject) {// console.log('hello world')//}).then(d =&gt; console.log(d)).catch(e =&gt; console.log(e));let snack = async function () { return \"cake!\";};snack;// async ƒ () {// \t\treturn \"cake!\";// }snack();//Promise {&lt;fulfilled&gt;: 'cake!'}const f = fetch( \"https://raw.githubusercontent.com/paullabkorea/coronaVaccinationStatus/main/data/data.json\");f;//Promise {&lt;fulfilled&gt;: Response}const f = fetch( \"https://raw.githubusercontent.com/paullabkorea/coronaVaccinationStatus/main/data/data.json\") .then(function (response) { return response.json(); }) .then(function (json) { console.log(json); return json; });const f = fetch( \"https://raw.githubusercontent.com/paullabkorea/coronaVaccinationStatus/main/data/data.json\") .then((d) =&gt; d.json()) .then((d) =&gt; console.log(d));//VM458:7 (18) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]0: {시·도별(1): '전국', 총인구 (명): 52980961, 1차 접종 누계: 15199919, 2차 접종 누계: 4521785, 1차 접종 퍼센트: 28.6893984426, …}1: {시·도별(1): '서울', 총인구 (명): 9911088, 1차 접종 누계: 2811191, 2차 접종 누계: 835878, ...중략.../////////// 동기처리 //setTimeout(() =&gt; { console.log(\"5초 끝!\");}, 5000);setTimeout(() =&gt; { console.log(\"10초 끝!\");}, 10000);function cook(ms) { return new Promise((resolve) =&gt; setTimeout(resolve, ms));}const myCake = async () =&gt; { await cook(3000); return \"케이크\";};const myCoffee = async () =&gt; { await cook(2000); return \"커피\";};const myCookie = async () =&gt; { await cook(5000); return \"쿠키\";};async function asyncProcess() { const cake = await myCake(); console.log(cake); const coffee = await myCoffee(); console.log(coffee); const cookie = await myCookie(); console.log(cookie);}asyncProcess();///////////// 비동기처리 //setTimeout(() =&gt; { console.log(\"5초 끝!\");}, 5000);setTimeout(() =&gt; { console.log(\"10초 끝!\");}, 10000);function cook(ms) { return new Promise((resolve) =&gt; setTimeout(resolve, ms));}const myCake = async () =&gt; { await cook(3000); return \"케이크\";};const myCoffee = async () =&gt; { await cook(2000); return \"커피\";};const myCookie = async () =&gt; { await cook(5000); return \"쿠키\";};async function promiseProcess() { const results = await Promise.all([myCake(), myCoffee(), myCookie()]); console.log(results);}promiseProcess();// 질의응답async function a() { console.log(1); setTimeout(() =&gt; { console.log(2); }, 0); console.log(3);}a();// 1, 3, 2async function a() { console.log(1); await setTimeout(() =&gt; { console.log(2); }, 1000); console.log(3);}a();// 1, 3, 2// why? await은 promise 앞에서만 사용// await [[Promise 객체]] 의 형식 fetch https://ko.javascript.info/fetch Fetch는 비동기 네트워크 통신을 구현하기 위해 사용하는 Web API이다. 자바스크립트를 이용하여 브라우저가 서버에게 비동기적으로 데이터를 요청하고, 응답 받은 데이터를 동적으로 페이지 렌더링 하는 방식을 Ajax(Asynchronous Javascript and XML)라고 하고 대표적인 Web API로는 XMLHttpRequest 객체, JQuery, fetch 등이 있다. response.text() response.json() response.formData() - FormData 객체 반환 response.blob() - Blob(타입이 있는 바이너리 데이터) 형태 반환 Blob(Binary Large Object)은 이미지 등과 같은 멀티미디어 데이터를 다룰 때 사용하는 데이터 형식 https://heropy.blog/2019/02/28/blob/ 블로그 글 추천 response.arrayBuffer() – ArrayBuffer(바이너리 데이터를 로우 레벨 형식으로 표현한 것) 형태 반환 fetch(\"https://jsonplaceholder.typicode.com/users/3\") .then((response) =&gt; response.json()) .then((json) =&gt; console.log(json));async function getUserEmail(id) { const response = await fetch( `https://jsonplaceholder.typicode.com/users/${id}` ); const user = await response.json(); const email = user.email; console.log(email);}async function printImg() { const response = await fetch(`https://picsum.photos/200`); const blobImg = await response.blob(); //blob을 담을 img 태그를 만든다. const img = document.createElement(\"img\"); //html body에 위에서 만든 img 태그를 삽입한다. document.body.append(img); //img 태그의 주소를 설정한다. img.src = URL.createObjectURL(blobImg);}printImg();fetch(\"http://test.api.weniv.co.kr/mall\") .then((data) =&gt; data.json()) .then((data) =&gt; console.log(data));fetch(\"http://test.api.weniv.co.kr/mall\") .then(function (response) { return response.json(); }) .then((json) =&gt; { const imgURL = \"http://test.api.weniv.co.kr/\" + json[0][\"thumbnailImg\"]; console.log(imgURL); const img2 = document.createElement(\"img\"); document.body.append(img2); img2.src = imgURL; });fetch(\"http://test.api.weniv.co.kr/mall\") .then(function (response) { return response.json(); }) .then((json) =&gt; { json.forEach((item) =&gt; { const imgElement = document.createElement(\"img\"); const h1Element = document.createElement(\"h1\"); const imgURL = \"http://test.api.weniv.co.kr/\" + item[\"thumbnailImg\"]; imgElement.src = imgURL; h1Element.innerText = item[\"productName\"]; document.body.append(h1Element); document.body.append(imgElement); }); });/*async function request() {const response = await fetch('url 기입',{ method: \"GET\", //POST, DELETE, PUT headers: { \"Content-type\": \"콘텐츠 형태\", //application/json, text/plain 등 }, body: JSON.stringify( 서버에 전달할 데이터 );});const data = await response.json();console.log(data);}request();*/DOMDOM을 탐색해봅시다.// body&gt;h1{hello world}+p{hello}+div&gt;h1{hello world}+p{hello}document.body.childNodes;document.body.childNodes[1] = \"hello hojun\";document.body.childNodes[3].childNodes[1];// 해당하는 Id를 가진 요소에 접근하기document.getElementById(); // V// 해당하는 모든 요소에 접근하기document.getElementsByTagName();// 해당하는 클래스를 가진 모든 요소에 접근하기document.getElementsByClassName();// css 선택자로 단일 요소에 접근하기document.querySelector(\"#selector\"); // Vdocument.querySelector(\".selector\"); // Vdocument.querySelector(\"h1\"); // V// css 선택자로 여러 요소에 접근하기document.querySelectorAll(\"selector\");// target 요소를 생성합니다.document.createElement(target); // V// target 텍스트를 생성합니다.document.createTextNode(target);// target 요소를 element의 자식으로 위치합니다.element.appendChild(target); // V// element의 target 자식 요소를 제거합니다.element.removeChild(target); // V// parentElement.insertBefore(target, location); target요소를 parentElement의 자식인 location 위치 앞으로 이동합니다.var span = document.createElement(\"span\");var sibling = document.getElementById(\"childElement\");var parentDiv = document.getElementById(\"parentElement\");parentDiv.insertBefore(span, sibling);const myP = document.querySelector(\"p\");myP.innerHTML = \"&lt;strong&gt;I'm Strong!!&lt;/strong&gt;\";///////////////const cont = document.querySelector(\".cont\");console.log(cont.firstElementChild); // 첫번째 자식을 찾습니다.console.log(cont.lastElementChild); // 마지막 자식을 찾습니다.console.log(cont.nextElementSibling); // 다음 형제요소를 찾습니다.console.log(cont.previousSibling); // 이전 형제노드를 찾습니다.console.log(cont.children); // 모든 직계자식을 찾습니다.console.log(cont.parentElement); // 부모 요소를 찾습니다.// 브라우저의 기본 이벤트 동작을 취소event.preventDefault();// 1let 제목 = document.createElement('h1')제목.innerText = 'hello world'document.body.append(제목)// 2for (let i = 0; i &lt; 10; i++) { let 내용 = document.createElement('p') 내용.innerText = 'hello world' document.body.append(내용)}// 3let 컨테이너 = document.createElement('div')컨테이너.classList.add('one')컨테이너.classList.add('two')// 컨테이너.classList.add('three four')컨테이너.classList.remove('one')for (let i = 0; i &lt; 10; i++) { 내용 = document.createElement('p') 내용.innerText = 'hello world' 컨테이너.append(내용)}document.body.append(컨테이너)// 콘솔창에서 실행컨테이너.classList// DOMTokenList(2) ['one', 'two', value: 'one two']컨테이너.classList.remove('two')컨테이너.classList.toggle('four')// true컨테이너.classList.toggle('four')// false// 직접 attribute를 컨트롤컨테이너.getAttribute('class')// 'one four'컨테이너.hasAttribute('class')// true// 기존에 있었던 class는 날아갑니다.컨테이너.setAttribute('class', 'five six')컨테이너.setAttribute('class', '')// 4// https://test.api.weniv.co.kr/mall// test.api.weniv.co.kr/asset/img/1/thumbnailImg.jpgfetch('https://test.api.weniv.co.kr/mall') .then(r =&gt; r.json()) .then(r =&gt; { console.log(r) for (const item of r) { const 상품이름 = document.createElement('h3') 상품이름.innerText = item.productName const 이미지 = document.createElement('img') 이미지.setAttribute('src', 'https://test.api.weniv.co.kr/' + item.thumbnailImg) const 가격 = document.createElement('p') 가격.innerText = item.price document.body.append(상품이름) document.body.append(이미지) document.body.append(가격) } })" }, { "title": "Welcome to Jekyll!", "url": "/posts/welcome-to-jekyll/", "categories": "jekyll, update", "tags": "", "date": "2022-09-02 00:16:25 +0900", "snippet": "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.Jekyll requires blog post files to be named according to the following format:YEAR-MONTH-DAY-title.MARKUPWhere YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.Jekyll also offers powerful support for code snippets:def print_hi(name) puts \"Hi, #{name}\"endprint_hi('Tom')#=&gt; prints 'Hi, Tom' to STDOUT.Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk." }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "google analytics, pageviews", "date": "2021-01-04 08:32:00 +0900", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = { 'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID', 'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET', 'OAUTH_REDIRECT_URI': '%s%s' % ( 'https://chirpy-test-XXXXXX.ue.r.appspot.com', '/admin/auth' )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend' You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID pv: proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;' cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &#8617; " }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 01:34:00 +0900", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 21:55:00 +0900", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &lt;GH_USERNAME&gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &lt;GH_USERNAME&gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build: Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site. Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file: $ bundle lock --add-platform x86_64-linux After the above steps, rename your repository to &lt;GH_USERNAME&gt;.github.io on GitHub.Now publish your Jekyll site by: Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=\"$PWD:/srv/jekyll\" \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem \"jekyll-theme-chirpy\" in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem \"jekyll-theme-chirpy\", \"~&gt; 3.2\", \"&gt;= 3.2.1\"+ gem \"jekyll-theme-chirpy\", \"~&gt; 3.3\", \"&gt;= 3.3.0\" And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 15:10:00 +0900", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Add author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one.)&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;And then set up the custom author in the post’s YAML block:---author: &lt;author_id&gt;--- Another benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.Starting from Chirpy v5.2.0, the property for the preview image is changed to image.path. If upgrading the theme from a prior version, you will have to update posts’ metadata to use new image property.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 12:33:00 +0900", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Specific filename@import \"colors/light-typography\", \"colors/dark-typography\"Reverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " } ]
